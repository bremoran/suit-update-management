<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-14" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2021" month="July" day="12"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Components IDs          |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (<xref target="ovr-auth"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, and <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. A Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, Concise Software Identifiers (<xref target="I-D.ietf-sacm-coswid">CoSWID</xref>), or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Manifest Processor Behavior">

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Manifest Processor Setup">

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="I-D.ietf-suit-architecture"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor–a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg]</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index and Dependency Index">

<t>Component Index and Dependency Index can each take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index and Set Dependency Index. Arrays of integers MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 3 or more components or 3 or more dependencies, respectively. True MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 2 or more components or 2 or more dependencies, respectively. Each of these operates on the list of components or list of dependencies declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) or a list of dependencies (Set Dependency Index) to which each subsequent command applies. The value True replaces the list of component indices or dependency indices with the full list of components or the full list of dependencies, respectively, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component or dependency identified by the component index or dependency index if that index is an integer, or 2. it operates on each component or dependency identified by an array of indicies, or 3. it operates on every component or every dependency if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component or Dependency. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True or Dependency Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index or Dependency Index to each index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component or dependency index of True, it does not ignore any commands. It applies them to the current component or dependency on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index or Set Dependency Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index or Set Dependency Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in <xref target="command-behavior"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True or Dependency Index = True, this means that the parameters consumed by each command MUST have been set for each Component or Dependency, respectively.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component and no dependencies, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Trusted Invocation Template">

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template" title="Component Download Template">

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

<t>Optionally, the Set Parameters directive in the install sequence MAY also contain Encryption Info (see <xref target="suit-parameter-encryption-info"/>), Compression Info (see <xref target="suit-parameter-compression-info"/>), or Unpack Info (see <xref target="suit-parameter-unpack-info"/>) to perform simultaneous download and decryption, decompression, or unpacking, respectively.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-install-transform" title="Install and Transform Template">

<t>The goal of the Install and Transform template is to use an image already stored in an identified component to decompress, decrypt, or unpack at time of installation.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: all Component Download operations are moved from the common sequence and the install sequence to the fetch sequence. The Component Download template targets a download component identifier, while the Install and Transform template uses an install component identifier. In-place unpacking, decompression, and decryption is complex and vulnerable to power failure. Therefore, these identifiers SHOULD be different; in-place installation SHOULD NOT be used without establishing guarantees of robustness to power failure.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for:  <list style="symbols">
      <t>Source Component for download component identifier (see <xref target="suit-parameter-source-component"/>)</t>
      <t>Encryption Info (see <xref target="suit-parameter-encryption-info"/>)</t>
      <t>Compression Info (see <xref target="suit-parameter-compression-info"/>)</t>
      <t>Unpack Info (see <xref target="suit-parameter-unpack-info"/>)</t>
    </list></t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>) except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The goal of the Load &amp; Decompress from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, decompressing on-the-fly, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

<t>This template can be modified for decryption or unpacking by adding Decryption Info or Unpack Info to the Set Parameters directive.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementer MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template.</t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list containing a SUIT Digest Container (see <xref target="SUIT_Digest"/>) and one or more cryptographic authentication wrappers for the Manifest. These blocks are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged structures. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in Encrypted Manifest Template (<xref target="template-encrypted-manifest"/>).</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier (CoSWID) found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>) or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
      <c>suit-text-version-required</c>
      <c>A free text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the invocable manifest or the “process dependencies” directive for any dependents of the invocable manifest. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the Component Identifier tables defined at the beginning of the manifest. For the purpose of setting the index, the two Component Identifier tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine’s interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array. If the dependency index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Dependency, in the order expressed in the Dependencies list or the component index array, respectively.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="cbor-pen-uuid-namespace-identifier" title="CBOR PEN UUID Namespace Identifier">

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 DE                # tag(111)
   45                # bytes(5)
      2B 06 01 04 01 # X.690 Clause 8.19
#    1.3  6  1  4  1  show component encoding
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 08cfcc43-47d9-5696-85b1-9c738465760e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers" title="Constructing UUIDs">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-slot" title="suit-parameter-component-slot">

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component’s storage area. This slot MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the keys and algorithm information Fetch or Copy has to use to decrypt the confidentiality protected data. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged structure wrapped in a bstr. A separate document will profile the COSE specification for use of manifest and firmware encrytion.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>SUIT_Compression_Info defines any information that is required for a Recipient to perform decompression operations. SUIT_Compression_Info is a map containing this data. The only element defined for the map in this specification is the suit-compression-algorithm. This document defines the following suit-compression-algorithm’s: ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="RFC8878"/>.</t>

<t>Additional suit-compression-algorithm’s can be registered through the IANA-maintained registry. If such a format requires more data than an algorithm identifier, one or more new elements MUST be introduced by specifying an element for SUIT_Compression_Info-extensions.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of text string, in priority order. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by suit-directive-fetch-uri-list (<xref target="suit-directive-fetch-uri-list"/>).</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. SUIT_Process_Dependency must preserve and restore the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-slot" title="suit-condition-component-slot">

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-condition-abort" title="suit-condition-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom" title="suit-condition-custom">

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Unlink</c>
      <c>suit-directive-unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies, or an array of unsigned integer indices into the list of dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, the Manifest Processor MUST execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index. If the dependency index is set to an array of unsigned integers, then the Manifest Processor MUST execute the command once for each listed dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>See <xref target="index-true"/> for more details.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as suit-directive-fetch (<xref target="suit-directive-fetch"/>), except that it iterates over the URI List (<xref target="suit-parameter-uri-list"/>) to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suit-directive-unlink" title="suit-directive-unlink">

<t>suit-directive-unlink marks the current component as unused in the current manifest. This can be used to remove temporary storage or remove components that are no longer needed. Example use cases:</t>

<t><list style="symbols">
  <t>Temporary storage for encrypted download</t>
  <t>Temporary storage for verifying decompressed file before writing to flash</t>
  <t>Removing Trusted Service no longer needed by Trusted Application</t>
</list></t>

<t>Once the current Command Sequence is complete, the manifest processors checks each marked component to see whether any other manifests have referenced it. Those marked components with no other references are deleted. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>The SUIT digest is a CBOR List containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are defined by <xref target="I-D.ietf-cose-hash-algs"/>. The following algorithms MUST be implemented by all Manifest Processors:</t>

<t><list style="symbols">
  <t>SHA-256 (-16)</t>
</list></t>

<t>The following algorithms MAY be implemented in a Manifest Processor:</t>

<t><list style="symbols">
  <t>SHAKE128 (-18)</t>
  <t>SHA-384 (-43)</t>
  <t>SHA-512 (-44)</t>
  <t>SHAKE256 (-45)</t>
</list></t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>&#160;</c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>&#160;</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>&#160;</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>&#160;</c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>&#160;</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>&#160;</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>&#160;</c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>&#160;</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>&#160;</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>&#160;</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>&#160;</c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>&#160;</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>&#160;</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>&#160;</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>&#160;</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>19</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>20</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c>{{suit-parameter-version}</c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>30</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>2</c>
      <c>Brotli</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>3</c>
      <c>zstd</c>
      <c><xref target="suit-parameter-compression-info"/></c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>2</c>
      <c>ELF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>3</c>
      <c>COFF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>4</c>
      <c>SREC</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>


<reference anchor="I-D.ietf-cose-hash-algs">
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
      <author fullname="Jim Schaad">
	 <organization>August Cellars</organization>
      </author>
      <date month="September" day="14" year="2020" />
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are, however, circumstances where
   hash algorithms are used, such as indirect signatures where the hash
   of one or more contents are signed, and X.509 certificate or other
   object identification by the use of a fingerprint.  This document
   defines a set of hash algorithms that are identified by COSE
   Algorithm Identifiers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cose-hash-algs-09" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-cose-hash-algs-09.txt" />
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor="I-D.ietf-suit-architecture">
   <front>
      <title>A Firmware Update Architecture for Internet of Things</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="David Brown">
	 <organization>Linaro</organization>
      </author>
      <author fullname="Milosch Meriac">
	 <organization>Consultant</organization>
      </author>
      <date month="January" day="27" year="2021" />
      <abstract>
	 <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.

 In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-architecture-16" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-architecture-16.txt" />
</reference>


<reference anchor="I-D.ietf-suit-information-model">
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date month="April" day="6" year="2021" />
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-11" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-11.txt" />
</reference>


<reference anchor="I-D.ietf-teep-architecture">
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname="Mingliang Pei">
	 <organization>Broadcom</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Dave Thaler">
	 <organization>Microsoft</organization>
      </author>
      <author fullname="David Wheeler">
	 <organization>Intel</organization>
      </author>
      <date month="February" day="22" year="2021" />
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-teep-architecture-14" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-teep-architecture-14.txt" />
</reference>


<reference anchor="I-D.ietf-sacm-coswid">
   <front>
      <title>Concise Software Identification Tags</title>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Jessica Fitzgerald-McKay">
	 <organization>National Security Agency</organization>
      </author>
      <author fullname="Charles Schmidt">
	 <organization>The MITRE Corporation</organization>
      </author>
      <author fullname="David Waltermire">
	 <organization>National Institute of Standards and Technology</organization>
      </author>
      <date month="February" day="22" year="2021" />
      <abstract>
	 <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-17" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-17.txt" />
</reference>


<reference anchor="I-D.ietf-cbor-tags-oid">
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname="Carsten Bormann">
	 <organization>Universität Bremen TZI</organization>
      </author>
      <date month="March" day="30" year="2021" />
      <abstract>
	 <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-06" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-06.txt" />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference  anchor="RFC8878" target='https://www.rfc-editor.org/info/rfc8878'>
<front>
<title>Zstandard Compression and the 'application/zstd' Media Type</title>
<author initials='Y.' surname='Collet' fullname='Y. Collet'><organization /></author>
<author initials='M.' surname='Kucherawy' fullname='M. Kucherawy' role='editor'><organization /></author>
<date year='2021' month='February' />
<abstract><t>Zstandard, or &quot;zstd&quot; (pronounced &quot;zee standard&quot;), is a lossless data compression mechanism.  This document describes the mechanism and registers a media type, content encoding, and a structured syntax suffix to be used when transporting zstd-compressed content via MIME.</t><t>Despite use of the word &quot;standard&quot; as part of Zstandard, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.</t><t>This document replaces and obsoletes RFC 8478.</t></abstract>
</front>
<seriesInfo name='RFC' value='8878'/>
<seriesInfo name='DOI' value='10.17487/RFC8878'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL MUST have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref target="RFC8152"/>, section 1.4.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
SUIT_Integrated_Dependency = (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope
)
suit-integrated-payload-key = nint / uint .ge 24
suit-integrated-dependency-key = suit-integrated-payload-key

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-dependency-resolution => \
    bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-payload-fetch => \
    bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-install => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-text => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  ? suit-coswid => bstr .cbor SUIT_Command_Sequence / SUIT_Digest,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-wait,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,    SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-unlink,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-slot => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-slot    = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-try-each                 = 15
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32
suit-directive-unlink                   = 33

suit-wait-event-authorization        = 1
suit-wait-event-power                = 2
suit-wait-event-network              = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time                 = 5
suit-wait-event-time-of-day          = 6
suit-wait-event-day-of-week          = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1

suit-unpack-algorithm  = 1

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'a6c4590ac53043a98e8c4106e1e31b305516d7cf0a655eddfac6d45c810e036a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd11a2dd9610fb62a707335f58407922570
9f96e8117e7eeed98a2f207d05c8ecfba1755208f6abea977b8a6efe3bc2ca3215e119
3be201467d052b42db6b7287'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820a6c4590ac53043a98e8c4106e1e31b3055
16d7cf0a655eddfac6d45c810e036a584ad28443a10126a0f65840d11a2d
d9610fb62a707335f584079225709f96e8117e7eeed98a2f207d05c8ecfb
a1755208f6abea977b8a6efe3bc2ca3215e1193be201467d052b42db6b72
87035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'60c61d6eb7a1aaeddc49ce8157a55cff0821537eeee77a4ded44155b03045132'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'5249dacaf0ffc8326931b09586eb7e3769
e71a0e6a40ad8153db4980db9b05bd1742ddb46085fa11e62b65a79895c12ac7abe266
8ccc5afdd74466aed7bca389'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0958258613a115781b687474703a2f2f6578616d706c652e636f6d2f66
696c652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582060c61d6eb7a1aaeddc49ce8157a55cff08
21537eeee77a4ded44155b03045132584ad28443a10126a0f658405249da
caf0ffc8326931b09586eb7e3769e71a0e6a40ad8153db4980db9b05bd17
42ddb46085fa11e62b65a79895c12ac7abe2668ccc5afdd74466aed7bca3
89035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'e45dcdb2074b951f1c88b866469939c2a83ed433a31fc7dfcb3f63955bd943ec'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b4fd3a6a18fe1062573488cf24ac96ef9f
30ac746696e50be96533b356b8156e4332587fe6f4e8743ae525d72005fddd4c1213d5
5a8061b2ce67b83640f4777c'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
            ],
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-run / 23,2
            ]>>,
            / text / 13:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
            ],
        }>>,
        / install / 9:<<[
            / directive-set-parameters / 19,{
                / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]>>,
        / text / 13:<<{
            [h'00']:{
                    / vendor-domain / 3:'arm.com',
                    / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
                }
        }>>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  235</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec0358bba70101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f09822f58203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc
9f949d84ea0e18d20a4382030f0c438217020d822f58202bfc4d0cc6680b
e7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  311</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  894</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f5820e45dcdb2074b951f1c88b866469939c2a8
3ed433a31fc7dfcb3f63955bd943ec584ad28443a10126a0f65840b4fd3a
6a18fe1062573488cf24ac96ef9f30ac746696e50be96533b356b8156e43
32587fe6f4e8743ae525d72005fddd4c1213d55a8061b2ce67b83640f477
7c0358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09822f58203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d822f58202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de3
3d54101b80e2ca49faf91809583c8613a1157832687474703a2f2f657861
6d706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c
652f66696c652e62696e1502030f0d590204a20179019d2323204578616d
706c6520323a2053696d756c74616e656f757320446f776e6c6f61642c20
496e7374616c6c6174696f6e2c2053656375726520426f6f742c20536576
65726564204669656c64730a0a2020202054686973206578616d706c6520
636f766572732074686520666f6c6c6f77696e672074656d706c61746573
3a0a202020200a202020202a20436f6d7061746962696c69747920436865
636b20287b7b74656d706c6174652d636f6d7061746962696c6974792d63
6865636b7d7d290a202020202a2053656375726520426f6f7420287b7b74
656d706c6174652d7365637572652d626f6f747d7d290a202020202a2046
69726d7761726520446f776e6c6f616420287b7b6669726d776172652d64
6f776e6c6f61642d74656d706c6174657d7d290a202020200a2020202054
686973206578616d706c6520616c736f2064656d6f6e7374726174657320
736576657261626c6520656c656d656e747320287b7b6f76722d73657665
7261626c657d7d292c20616e64207465787420287b7b6d616e6966657374
2d6469676573742d746578747d7d292e814100a2036761726d2e636f6d05
78525468697320636f6d706f6e656e7420697320612064656d6f6e737472
6174696f6e2e205468652064696765737420697320612073616d706c6520
7061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'7c9b3cb72c262608a42f944d59d659ff2b801c78af44def51b8ff51e9f45721b'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'e33d618df0ad21e609529ab1a876afb231
faff1d6a3189b5360324c2794250b87cf00cf83be50ea17dc721ca85393cd8e839a066
d5dec0ad87a903ab31ea9afa'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<<{
                / components / 2:[
                    [h'00']
                ],
                / common-sequence / 4:<<[
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:33792,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ]>>,
                                / image-size / 14:34768,
                            }
                        ]>> ,
                        <<[
                            / directive-override-parameters / 20,{
                                / offset / 5:541696,
                            } ,
                            / condition-component-offset / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<<[
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ]>>,
                                / image-size / 14:76834,
                            }
                        ]>>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-try-each / 15,[
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ]>> ,
                    <<[
                        / directive-set-parameters / 19,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-set-parameters / 19,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ]>>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / condition-image-match / 3,15
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  332</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b0359011ba5010102030358aaa20281
8141000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258368614a105198400050514a2
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0583a8614a1051a00084400050514a20358
24822f58200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c22010f020f095861860f82582a8613a10519
8400050513a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65312e62696e582c8613a1051a00084400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  408</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58207c9b3cb72c262608a42f944d59d659ff2b
801c78af44def51b8ff51e9f45721b584ad28443a10126a0f65840e33d61
8df0ad21e609529ab1a876afb231faff1d6a3189b5360324c2794250b87c
f00cf83be50ea17dc721ca85393cd8e839a066d5dec0ad87a903ab31ea9a
fa0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a2035824822f582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824822f58200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'15736702a00f510805dcf89d6913a2cfb417ed414faa760f974d6755c68ba70a'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'3ada2532326d512132c388677798c24ffd
cc979bfae2a26b19c8c8bbf511fd7dd85f1501662c1a9e1976b759c4019bab44ba5434
efb45d3868aedbca593671f3'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ]>>,
            }>>,
            / payload-fetch / 8:<<[
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ]>>,
            / load / 11:<<[
                / directive-set-component-index / 12,2 ,
                / directive-set-parameters / 19,{
                    / image-digest / 3:<<[
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]>>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                    / compression-info / 19:<<{
                        / compression-algorithm / 1:1 / "gzip" /,
                    }>>,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  292</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a0358f4a801010204035867a2028381
4100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432
100e1987d0010f020f085827880c0113a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a11601
1602030f0a45840c00030f0b583d880c0213a4035824822f582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c221343a1010116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  368</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582015736702a00f510805dcf89d6913a2cfb4
17ed414faa760f974d6755c68ba70a584ad28443a10126a0f658403ada25
32326d512132c388677798c24ffdcc979bfae2a26b19c8c8bbf511fd7dd8
5f1501662c1a9e1976b759c4019bab44ba5434efb45d3868aedbca593671
f30358f4a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab45035824822f582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583d
880c0213a4035824822f58200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c221343a101011600160203
0f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<<[
            digest: <<[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'd1e73f16e4126007bc4d804cd33b0209fbab34728e60ee8c00f3387126748dd2'
            ]>>,
            signature: <<18([
                    / protected / <<{
                        / alg / 1:-7 / "ES256" /,
                    }>>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'b7ae0a46a28f02e25cda6d9a255bbaf863
30141831fae5a78012d648bc6cee55102e0f1890bdeacc3adaa4fae0560f83a45eecae
65cabce642f56d84ab97ef8d'
                ])>>
            ]
        ]>>,
        / manifest / 3:<<{
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<<{
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / common-sequence / 4:<<[
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ]>>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<<[
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ]>>,
                        / image-size / 14:76834,
                    }
                ]>>,
            }>>,
            / install / 9:<<[
                / directive-set-component-index / 12,0 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-set-parameters / 19,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ]>>,
            / validate / 10:<<[
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ]>>,
            / run / 12:<<[
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ]>>,
        }>>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd203590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2209584f90
0c0013a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e1502030f0c0113a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c
45840c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820d1e73f16e4126007bc4d804cd33b0209fb
ab34728e60ee8c00f3387126748dd2584ad28443a10126a0f65840b7ae0a
46a28f02e25cda6d9a255bbaf86330141831fae5a78012d648bc6cee5510
2e0f1890bdeacc3adaa4fae0560f83a45eecae65cabce642f56d84ab97ef
8d03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAmR7GAAA+y963Yb2XUu+h9PUUcaIyJtABIl9Y2OM0JRVJpn69JbVLvj
dPfQKABFsiygCq4qkIIl5Vn2s+wnO/O+5qoLSLXbTnISj8SmUFXrOtdc8/rN
yWQyavJmmR0mR8lxWczzOkue5EVabZNXsz9l8yZ5na2rrM6KJm3yskj2jp+8
er0/maV1tkjOsipPl/lf+NGzslqlTXJeVklzmSVn5XlznVZZ8v16kTZZTQ9O
iyariqxJyvPkzWVeXNTJ3tn3p2/2kxdpkZ9ndTNKZ7MquzpMsCPtB94ILyzK
eZGuYMiLKj1vJnnWnE/qTd5MVvLG5ODxaA5dXpTV9jCpm8VolK+rw6SpNnXz
8MGDbx48HMHA0kOYwHxT5c12dF1W7y6qcrM+pM5G77It/LQ4tAFPnmJno1Hd
pMXibbosCxjANqtH6/xwlCTV+Txb1M12Kb8mSVPO3Z95sYAl1B/qsmqq7Ly2
f29X0T+bKp/by/NytYJv7WleLPMidJO9bybLHCYNjczKJbw2KX/zW3gCy7RK
12tYYzeOt8vsKsOXHo9G6aa5LCsY/QSe4X/yAh48mSYvyiot5Dde6SdVVizS
InpSVhew3rz3QD7VKnmer/ImW8jzbJXmS/t0Sp/+c1qtpjChUavTb6fJm3p+
WZ5nRX4R9fxtWhRAO52nt+z9kj6fNvb5jhE8yat3l+XyL3H/WfGu/STu+1mV
bgpsvUrOgHLi7uHr6Uy+/uc6b6bn9vZ0kbUH8b+myb8Bec2yKl6E/1VmRftJ
PIjTAk5i3Pc7+Gj6F/non3N8AXofjQo6pvlVhnT7+tnx44OHD+XPrw++0D8f
ffP1l/jn6eTplE7YvKyzyWVaX07S5UV9OIIzVZz7puxNOotpNb+E7Zg3m6rn
qX1aFpNVuciW0StNlq13NJDOVzia63wRD3BWVpMmvagnJT+BWXz1zSOd0ME3
XzzQaT76Rn/96uHDr/XXrx5/pX9+/RX9+sejF88PaVWFSd7BX5KjvLjXAD+q
3m3WyfO0uNikF9kdes/OFPwHud5h8vDBwwfcRFpdZHCqL5tmXR/ev79NV8sp
7OJ9ePrtyb/G/SDbWeLP3WYjirnzQ/4uX2eLPL1zmz6BIq71A+ob/3WfOnsL
ncE3Z69PjuOh4C/J3nm+zBLetP2/x5iw17fU61vpFT4+ef4sHtvJe2DgTTqD
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
6UFpG+PubQq4vN61Ls/kyRYWUXTUWuaILCAwsrJaIB0SJYPUeaEKrafRywyb
yXADZxVKdHA6mGkG4UKlZ17UbDFNuuLEhqUFmFXELECLWeP195egRtMMUV7a
rNas4W8j8cku1lHQcuO+SDLEEyyWD5if9sKyTIfp9psWbIZjUYGhYdxvXCcR
h2/BT3mXQVgjn0NNchK2jHMvlluxO1hf0+QVHdCwvKzaZXpLATmtaPfOE9VR
5GbmQ7v35gjUPRTkbU5sPMMpnRRXeVUW1MDem5OT/XFCd1s93xCDiK+IjpmY
boe7CZ7tK7yTVTl+AxJqXpTL8mLLZ+4dkA26d+rkzovvz97cGfP/Ji9f0d+v
T/7396evT57i32ffHj1/bn+M5I2zb199//xp+Ct8efzqxYuTl0/5Y/g1iX4a
3Xlx9Mc7fPndefXdm9NXL4+e3+Htclw0EbY9y1i+BmGaFrIeqS2O1uLJ8Xf/
9/8cPIY1+X9ePzt+eHDwDewn/+Prg68ewz+uQTbh3mgz+Z94akYoc6QVbQRc
TPN0nYMEVNN616B1FQmSFCzn6Mgpx2Oxc6B9gI5jWFikPuKKTuaO5kQXHZ6E
w7Zn0JhG1zk4Zn2WHp68eYabRpyEL1L+Dq9/dMql1QKlte9YBUSH5jrPmKF7
kx4vK9A+XA4VcYPtOp+T6v+szcVMkYA2cOjY/uusLjfVPBvuAA+UrUYp3GEz
R74r+im2o+7Mw+QWinOQN4ftocEcOjJzqL49NmlshzEURwUnMFvC5Y2jgoGT
gdaJhjpQbC+IvjxvNWjRy7cxqbZbZO1AnMnuEx48K894T4IyxnryXp3BQN88
ebqPQ2diOkxeOctCsKHQrujpiawPanAIbYgaCILhId0VcBxgXmxCieb1jq8f
vvVRHpUbf2y8Dxj8azVs10w+8i9umuUueN+IsLWnwp7nGckyuBCiueO/gkHa
EVTyHb9QVryJIIYWypGhRxuA2srxKoPGXthSYScZ8eRMb3mVh/haeeF6Pdb2
oTOZP20S8AScUDJblvN32vczI0dlAWM21l1sKtlqNQO1Rxv1lZxldG5MniYu
qWahJrwo+76CzSBzAW3PAgWrzRJ4RlZu6uVWmsYpShgEc7yE7ApPVZLk1+QZ
vtiI1QfPdYUCLysS8SKjWQ2GEUY0JXFd2qRFS9lmqEzHbVCpiseUJP+2CEAs
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
UHIu8+fSZDR7NJsva9j1R7CbSQY/fFmgnXplP1yXJfz1GPbn2bKGP/1lebEY
P03WczLawEgYhvTV+nxpf4O+lMUK/nqUVPWqWNiHuMzFAn755/++eY1v9Z79
878o6QngAvZ7UOEiDtY5yDZfv04uV9U//wt+/rp6e1O/XcG5H11U6//+P9ns
v/9X/WoGXw4WefW2+MF+un6bV8tr9uOjGSwF9vkZ/n+VwxbQjF/PcuQS1/i3
EzTHrKHNIXot5vOZhTRrp0ARtN979oM11qTFXMc//aGEP4+zPJ+/sxqvg8ii
BLhINaSaZj5FLsxlLdIli9QZjQgMsh1eoh/8nCdbSHJWuWDZOlGaED2kUaXO
9shzlxZsGiNTD1Voi0yVT85O2O8YwLzgryBmPMhGfeVEwJ6ZMctx26ZdCXsf
hYk8e3AUu6H37t1IZphw9wKY3z/+8Q8CaZGqJoyqL58n5+cA9wv7D9Ge60zu
Nr7eazaGVj9Ztv0/uLlEucq++DOz7u9lqYi6PJZfR9CF0afydCGZsdjtytT5
oNFSApCsztRHnDq2ph9kYIz89PJRgcXxamzyR9aIxemgVfTlU54IxfhRWYvY
93/7t+Y2nogq2Rz4XSRUPst7FuYCbG4KbOXf7c/pf9pCjr59bn9vf29Z+Icv
THvx8nC+RPowfEKQMLbdPQrmfKNvf9yw1xz+92LCTCVmkLldgKQS6YUAncWW
5e50p8io1YO5eu6zsAl9D9kYY1lnvJajm6Zm739B5AGHmnHk3aLxGbDZ7VsD
aGc32K5obm1APdjKuzoJSbMnsCJxjRqQu/0cYqRg8Oem/PHtbn1FkZPdelFk
jqELahKw4CutKaDENSBIs3G2XGA1CLJDoHwwFp7NBlqoELZLtnUahoyse3yn
u/SLO8wXJz7JPUIPvyTKfhLnh2TbbTjaeWmg9D0QDAEmODgJKkRg79tr/L89
uHK8oNOhPVpnOhpEvh0S3Vps3bnb+Hyv1Zwz9hablSU0xD+wXndkaCdsiWNe
fBTa4bq0pjwVVvefHsxjTF+ikYwBRkNBo/OKc5Muz2dI8/LoYjlj2MubvFjU
7UaCNXLMk5uoM3XBwg3dmzRNEgDKJLsRFUPdnbrge8wte+Da1guNpMTRMdoy
klbfXm7Jwv6n8S7qZBzcb99RfWztPeHtwOp6YfQxvq0BGNnhliDwCHsPsB5n
dDb6LSrOkdGTJPH2uaETuUFSXFLRcrXq/bQ4fdvQT1pBOr0wl6t8mrWJ+hvI
q5Em+9pAVyVbGRbEpKzm9xsQsFpz1ReiesjvLzUXF8gmvfcXdE4WN+353DS5
q0YwPLRF7rkmp3Wpi8cUdTZam1xrs9QM2hv2H8ZM/PctgxiHYg79An8Z1xcJ
BqYAAONDiK0AvCpcL95qJD8OtmoXut52A9PU+4/2C9v+O5OPv2+QjiJKIWF/
bt9tFQiy9/cb+CuCDex7VguY/LK/LySVQXf6yGau84Pq/N5ugLrpm24BSPcV
jrZiwTsAF3577XqWxUBePq9uXqLD/6VIULDj8pVznIH/6fPWe8D63Q4QDT73
AbCW2GlEQpSFGj9gYvHGD3//HNvoiNK4CxhPuqs2qYt2qoaKjogIhZmWrXt2
Gzy3OYul8vhD7l4Z0THvo3i1D1Pbx1yvVmds1Xeg0Dn1elZcvXxKz6u2AtOt
hn4rMB232u1mowXhjPg1cXswMrJhdEswyrcsJnMrMC234a1n0w6cuN0Wc1VD
ruiWs2k60Ue3BUPJnfW5GMBYHbq7JTvfDGIjIx8GcWsWPgz2Vsx7GGQ3oqoP
mzZv2vbsfxjWbox/C4Ck0WxAri3AsAf07w0G44Y+ABjAsRaUW4HBoIEPMJtm
6NQAGxgGwyKfRoOzsTYhvhQava7t1aSqg+wPl62UGtVY9hfcWpRS1i1mF+Hp
U8f4G3+33PwRev27Zsyqga6gRbas8jGvNWPft52RuYVI73G/YfehFvVNjT4z
DYjX10RB8aVSiqEjL1mgHGhHQuNSv9b2u05LXTCj6BJK4SOvHumKmElus7Hv
FcUM79ZnwTMA7daLHrMLgUSU6cX9EgqdgiBR5yUlFXrJIode8rCCbQekSvXc
EnfvP1T99x26Y66fPLkR09Qg8QRG0I1Xn2ePtkTJ+W3nCMBxjGtMftQcBIAL
oGfrBU6iDXJ4lyTV6fuunA/N38V53Fe6v0oawgG+ZAGr30vC1EJ01doGohNh
cTTw3WcPjgLX816+eHF6bO/byA3GcN3du2eJP3KzrevdZZbqrQZsi8y4mfpQ
97aCokc6iiMx+5N2gUePUcXhbtVPCbm79WsKgKrvVp1bEYt962+lkdl+YnpI
Sx/wdhqbLbdLBZL0AdbyTG65HWhr5yb27WbRSfe409GJgEnlodmqW0fHux3i
t9ShHbG1VZR+p87Cy8L5wxD72Q6gjLwUINuooJjotryFmwroxttH8wWzDOxw
THqgMp0wANkWq7REY7LnthjMchj3bMSLZ6cvMSQVwDW48he8JfEtN2oP1roT
xFVjVmmJHJJqVsMf8ZXZfashS6qYeQH0SLZ/SS/NRlsCp9dSu0CnoE9LGsM3
zcPe/2LLmfBnXh8N8BjE5WT+4cF/JLCY0f3jTZpBt6ytdw/w1d2+NZs29PG2
6CPa+lu01XcFugRbd4HGobXFPrKUO2hc1Wyr7RRwPIaD/8zd5vv6b81IkE6W
uYZvR7/k1Yti3WUj+qoQ1q6HqzGA0ddlhoSW5P7PLzGY9z26pxTc+z7j16t8
aP40QULOjbMgdNwwFKGh8NlL0ad5Xlxs6h4V79F7ShrExgFpYQItAHJz2l9e
flW82bnPybzcuc/Rsty901lVZD1Lwomr4zJNUR2TcTJ0Qv3DElOwGvc0UTMJ
pNKbIYKO5MGqX78ubuS5SWTpev3+zDs2O6u2CIYavJOna2ghY4a0WAGhBC4w
Nl390whb0ZtT4HG7dX9zDj1nzyW2hE5y4TbQlSaVa68mtmiuRw0NzJ1x90q8
keg2p4AHA/xXxY0pzEEeufEk1KuKbRbD5Xm97dDGCtg/4CXF83Vubn2TXM6N
rZsL7y6XRwZooaT8Pu8LsBV396UK9/L7gwDa3n5oPXYHfP4d5z51iK22Lx9/
Dnyr7bqnnwOr46mn30OrOXOlLIk19wehKYmFx7/4wj6qB5NJyaMnkMmeiMTH
jXgkOxbhejysyJ5arfAv23UsLbTLdvmMKWzLFjELLKbIdqXIxCKEbDewWvPC
uBZNdJOxK62FqiAb4p99MScCkCHCBOApgMolzIMWDZJmx9LVFTA71imTRKn5
WQV36oqSmmVINuoIjy0zEDUKOzMnN59t+Ie2f5MvWTX2Oo1brl4dshe2G7dN
D3rjqLP8tr9VazzpkaFNC/RiYz29lrdSbodnatyp9MUb++3GskKrYaPDdmND
8gXZON5QA7ABebpNUTqxHY650JUROTy33Zgybfc07mwdMoC+xr65BEJP684K
W6Wb9MZ+Z4WU79kM2e+ssJFZvdW4s0KeMNcIWayw14Mjm7qdhsxd092HTkPh
o2kP3mlocgMohtJ2p3SHDo0NueNEbxh1GmrOD73hpJNpf4DBDpj/1b6Yrfut
PTGa3uWkgs5wAwy2x+gnTrUzq4aBT7TqTEvzJCgMCTpDtmz4ts42+q3xOr8w
WtUVrjmdVnpIumjVOZ+ObVxjDQYbuA7L7yzSYPOWl1C/SVu/UPpt1/pN0jVS
NybW2VZledZadbe1w56IO3XOyCh1GA0sQA6WWaHXvvXrAYqe+qV/RU79Mr+i
pn5JX5PKhlTExoR69MLGhHqUweaEzBqgoO4htU8wuiFdT/C4IQUP2Ns//vEP
fN95KFPtYwY5nhi4ftdOdyc+2HlxyRL70nNPylnLsp3JTLvlepGxtIA8F3Mz
gTI6PCiHKaX3N6SOx7eWoizN5VJm8K0LPQUbTU9OCl8388TNa5nnXE3+5Oj4
jBKEXoFCU7mYYfQ+vcTEl67j8eHJl6eP7afPTr85eH5if33yHf1qPTr98quD
85ODR4ePvjy8+fHLs0fBFP7+5dER//P1yVeHXzrXyfXp4cFf/3p+cPWf3/3w
n0cvvnz4KHS+OTyyjn747mz1t8+d6Q9fXi5u/vK0ujp++Pzt/sXsb08unh08
Pjo4ODuZL0+w1MuPP07/cvHNm1kxeby8fP3jjw/jZ6vX1tPP09nq22+zi/z1
QfW8Lr9+taqPvjt5c/3141X1+Ku/zaZPDv3Hn18vDl6s6reXzzz/UbD6evYt
W9bJ4+PuoujUn3ee3V6t0/kso9SrrYIOqrxUrTbcsHsvDh+eHmmb9+DV9cn1
d199vfzP07c/OEcHf/3ulP/5+OCv2TFs18nFX5LDL38MHv744+uz777Jvlus
3yZ/qaIfZ/snqZW+3b8Mqm/mi9O/pddfO5Ovbq4epgeXh4+yox/S5O0zN3j9
/Dx/W9Z/uX7wMH0UvspXb588PFvOz7/4Qlt/a1q0fJbKXtWXqDHDIqq6PHEu
v5gFHmMqvOWqEInKG5WSRVnyvICLv+JJiEnEXgDRlYB/IrWwTEvM3sJrm8ne
GhsA69U3GqjeSEnfRHUqEYb0wYOVfrYpM4NIw8A4gx5bhGyTxw5h2oZs/BQE
GGOzUqYywmaY2Ehr1o5D+tk+u6nbsNqRSKwRQbJ4DJb2mwZDG1OfpZZb4ufG
Aoe04p9tV//fRg15Q3tdWd4Euims/Ww7vKWjWrcVH/ZRNjQqPBvaVJRBrtkE
05iICivOfZbuorAPl8sVT3EhyEMrlaAhWQHfMJUEJUggX89qxmqw8ToLd3/6
STRiniPxnRXZePeO8pqqURsdKAkFCL9LzL+FQfwrlqSX0gfKAhBcrBIzZU/r
LXw7r+zI+3aPLW7f9u7/6U9/t/QLmJH9fbv9Owekv7TeR1Mc/Pez+iIBxvGZ
vT8ydGm8uN63Lu4kURaEUyfJQt8J/GQaF3EWuE5UuIXvpr4Thm6UT7LSSaIw
LPK8TLIoD8Isdp3C8aPkTmOQ7//85+aoskgCrsGN73aXwebFU5MUuI4//ekn
Yyu5aPive388wcWenPWtFf95156OAgPioDakecB3fZ25xQ/+9AC3fAEsoGcG
+2oH4M8Xd3LXTbw8n0auU6aRl0ycie+HZRgHzmTqeeHEsablNCpi150Uk6Io
8mmceKXnTHIHNr3IyjRxJ2HoOXEZARdNppNJGidRURZ+mnlZ4ntuWLigsPhp
4TluEGFHLw28PI3SiRdP7nTm+f29P/+5eYryb43z3FeS0b7t328fk/osZT88
J3fU16ptlkUCcNqtuYnWNKBsIMydCMCMYH+/uOM4d77vLt1EI21j6b4ddAhT
tR62IcGUnNEQOsvLAKjRvX9xp0yiNEhCPw+TPCzzMi2meRFFfhHkgVuWxR3o
I9qMsdEYW40tbDfWG/ZhJF8jv1JgVA9GdYOpl5RuAMQ0DYsgTsvAm6ZeHrql
l6RBeAdnx9ug4X86xlZjbDbW2w0P2rAxsBM176rqsjOLax9Oi905jut6nu8H
QRhG0WQSx9NpkqRpluV5UZSl43p+EEaTeJqkWQ4/FHmWAlecRGEApOV0qUf8
02F9prWTjQKoIrjvB5Mo7uFadh8vGZIhAOrIDbfo2pEmAEehZ5c22gvqcNN9
W7o0YHTHeJz6yLpcAsffHrQz4L6NcgKA7l6M7HNToIB1+COvH6ScP1zgTOdY
YqZoUQ5FprIR1R0o1U7zsraX6Q8w4n3bdiMXpHbeheseeRylied4YexNYhf+
G8SeB7zdczbfstbwNev4YTxxk9Bx4V/PcfDvYYmDxW7sWgDLcQL4KYojN0gC
xw2dTZwE5ukgTVtDhI/jqGV0qcfajXycwoW/5ADHKR3Pgv8kgQ+AffhThn9y
J/DzpsMZPhnPn6iT2di+fXITmMQHPTm42pPciwPoDGfnwVGWEV73TBKwhkSB
TZKAtZ0oYJYErHgyjFRDOGVtQqohnLI2IdUQTlmbkGoIp3QVwwUVQyulah/z
Mo2UHO6U+W5lgV+eQOYXVERknWg5L+gm0uaNRU3JsQBESkljPbm+nllrPVyA
3bMfL1l+vYIqm1MOP1aQhqnx2mKpmJZuZ5NzoCo+WmmdX73OEzlZ5OZRkU4S
N0mAZrNgmgGhhZMkDDPAOMCZ0EeaKyaTJMiLPAjcMEwBpYLQ9b1POs9OOk/o
BdM8yZLSKcss9r1oCpzTmYYxnkDhT6KpVQAbcooImEySwzn4eRpMYydPp6kT
prk7AaYFP0UOsifXLSIvjcJkMo2nYeZ6STYB9udFkRVnWRYmZZ5PgiCK4GQn
KbDBePrr1nk6rT/pPJ90nk86Dwfyq9N5RFzXvj3dqJa0YlBgvtMeygDuXM1w
Wu79Oxer1dX9/X1hRQTa3Mdi0HvpbHGnu1bT1ulzYEZbhDzyjE3fR0H7eArg
h9XWptEO2tpm+cAaFhBQwJ0GUrB2fzfaGlzasF+RC7oM7EbsplE8CeBfx0fV
BBSbCXwEdciJsij0isiPyiiH3yMrmvKf4PoH5Sl0mIAuRfX3VfpAoflwSt97
I0Cf0sdEIWtIFtokClnbyUJmUciKp8O4+dtV+npR09qEm0OoaSnc1JVHr0d5
HDU0x5HuThrZvN41qHZYd/vX59S6ndLZWAX5xDQ1sdZqKcuCvgBz+boayy8A
huWZp4Dnu311Du79FlTLIgjzLE89ZxKkU8B9N4vjNI6iIJpO/WnmJbEPvML3
E98ts0leZqlfRv4UWEc+Dfwi+6Ra7qRapkGZ+0mUuHFZuE7khRM/iOOs9IIk
A1oup6XlO8ATAyTyInSAc0Wh76d+GKXAXKMCjgL5f1lEZVAAw/CTIvTCfAIc
CjhdngfAU124lK0wiZ3ITb2siCZp7EeBUwaTyST7dauW3ifV8pNqqXX5pFrq
QH7VquXHuqH8Anhgnk2mUeBOJ05SBFE69aZZVjrpxIPDCf0oz2MQMD2QOvNs
Wk5BZo2DAqRSN87bxs/ftEeQ9SGxA2D6H23PvbTMgtzJMpDL4Q6a5Pm0DEEc
d5LES9Mwd6dTEL3DvPCBUYEI7qaxU3hZEkzLpJy6ce+ev2teKEOmid3NEtwk
YfWYJIA93+zPl4vzfZA6L/ZXSzJS9Fkq2lS4pYViS2RpXazqRNuXHL+57vcZ
YZqx0shU7yTVJa7XYHkREzSFRe/b4f07JBuruH4szWQp6RjjOCnOUq+lXjNB
+ooC80GDWCxXVPoZ1GIAsmey/2xrMkHdYgezCVZllone7RNZyh1oKtzBmLJZ
IraGRWJUHNM0mXCF1fv9GFME7F1ZstXmySaPp5ML8E3uY+3OfuiEN+DSECKl
gGcC34wY5btDwRRt68x7Y1SfdYZpE9aQOrFJm7C2UyfM2oQ12YDsv2HrTB+u
W7vKHzquW5uQfQjXrQFkv6UhkqwYRgyPp8Ht7JPBJwr4RAG/LAWgKdXPlCnV
90xWfqtrSp1E8MmbTKFJBr/AycJvcMqALjH8KYhKYW61oFu/5TUPp/CnAM7c
nUwdd5p7PvwLx84suBYf14FfoQ3sFuznJIwQLV0YNYzKCeAtdIARJxP4BWfj
RoGXeY4VwEgTn5pm8C9OboqTxY8AKox86Owh+MCD32Ha4ssksiL6BJAcogAY
MwomsLMO4if9G8JaoymO3jI4OxZuE98iH0kXGsLPsAslzQSnOqVNw28h74jz
g8VYvjaG+pMHfwpo9/k+T2krM5hBAOeA32AQHDlFApqk8G8LtpdH/QDgm4UQ
EMAkn+TetDl2z4bJoaz2WBO9Qx7xDibQAfqMoFkO2+Jy+O3z5OMgIjVa5hGM
3Gyad/a0NaZ+hFbfGSLSwBJK+BOBQ8RBZIJR+UHBOU8IVwhVXFgh64iogh2A
R0JzX04dMGLisX3BPpbqxCaIyEdYHTC0mMRqfwEcfplGOBjMwsKFw18n7K9s
zdiBgyoY/4SF+hHbqlwQrwMjx8CoFfYKpCiJogoclX9xu6u3NDoqOBGE1EzN
RusOq9UJg6EeTdZjhAhjEh5RY6Q42HePz8Uruv4Y/759sH/IC9P+Tjwrf6Ql
neKS7Of8d+yVjNOmB+ZX7xSZZNPUz+BuyzxAbSdOAg+utADYPNDDtCw9uIDc
bBInJfxYlCFcSCX8t5iWwPI9N/3kFNnJKYJqXASCQumAjOcWEdznHogpbgLC
SVKmnu9acNGXbh6BeBhPU2DicJUGGdzcIB45aYzRzE5Wxn4KIl6RuBOQVjw3
S+LQn/pZHhexP03g4gKBKwf9PMnjSTIF4SD13SKZJmXy63aK+J+cIr9Hp0i/
nd+QbQiwJhz1e0s2e1Le60gUmGVZYpoCtBb6Pghcwx6YviUqeKaXvWqMUZ9D
44Ova2fflOr6Xj4qfSG/mK9K/DPos2rvzVa+K/HPu96vMObAmf4r8BhUSpD6
PiHyx0PkTZbmDYj+0RAZ0NgP3gORjd++/226bze5J7e5iYZQ7XZRxqr39hfP
EK2+F52+7xI2Bky7PRHTcmVmhOvlqL/QeWxioL/dA/FueyBdcvwU9L4x6N33
vR38tJuVdGtYS3f8cAo3TypDi300qScJM91bynafuDH8Ba2723pqrWHNwSnR
PeIzl4DrhO40DmCoEP4Ew3wsyz6MmMgRE4AbB9qoOKiljbrznd12Lxc0hgvH
4+kxz6DoR2z9XsJM9rh+S26ACIfOto3Uj6YW/uS7wiwPkDMJublOA3Brm1hr
39sYbX3rlwCBE3/AlwDvTRV9njZmpLGGrDSbjDTWdlYas5HGKpNhgh2iV2tz
aEU/vVqbCHaIXq3d9TZFr9Ymgh2iV2s3IbtJr9Ymgh2i1+1IqoderU0EOwTc
2kSw2usI3Rwf3Lcfiqfnx4XIzGmX1fIS2mBgE9D22WpZwc34u7HW85cfDchc
I2ANaEv+Xd8QvSlBzOW334ZlH5DJjyaOB6gOTM+JnTAHjgS8cQqo5mVlGriT
AhhDUCbJBNB+OgnyaBKGgH/o4v+UPWw3y76f5HA66AwHro5xFF7mxzFwn8k0
zrygLHMry6aTaVomhZd4UepOsziL0xQOxy3zSZ7HYQkU7EaRl7nJFDjjJEon
4TQLHHeagiwVwG0Q+AGIPSBX5X4cxUmRp1kSTuGc3dL/dVv2g3brD2rZ79Gc
8Ks3+NX92F4BU3p+DJIeOVvYxD+5FD69s9iw9t/bO4tmxZZ9O97qIb+RwtwN
hojffQaAXdMhbM2nbruLnXT6sHDvvgv/Jzi1gf42bSEltUVA/yJz0q338H0m
xqUU1739pMy7dbuD3YkPvwcP/sVcLr28dyfXSh/GOxzjHTPGs66dahd4AkZZ
ydxHlVMgaQ13+Pzt7Go3mfpfSXxbvye7NYr/4qkpvekudt/NKpw1rMOh4aQM
kpgbkQL8ezQhI5LP3+eQLcmj/7oUvR3HsZMB0Wx4r2PtEsHdNhtZ7yMyWYYI
7pg2DyfuDidAMYRG98Y6T4OU7wWCjBzXciNpYUFDYYZ5GeFvaRj7OTUFvS8J
zOYq67YMCs1VlrBXuT6zVjo4IUfOJ+Pz+RBJOv3oQ1pp3xuH+6y0TOG2hjTu
TQq3tZ3GbVa4rdIfJq8h6rJ2fQ6nU5e163M4HZ+sXZ/D6dRlbSKvIeqyNpHX
EHVZm8hriLqsba3BJuqyzOSl21TD+/bz6yWLB/69hDhbD9YVVlm7XFbFyJ6t
7PpieV2rejl1oVbBmMTqesmjvH8L2WByt5j4pRsVAfAUx5mkWZDHTpDlvp/C
sU9LYACgUXtxETlFEQMylr4fT6DxJIjzzlv7T+bRdttWNphJUgBdR4kXA08p
vDDLkyifwomFaZqUMQgUPjA6N0bfWhEmE2Cq+GQiTrMoK4oQrg6vcEo3njpp
XiRZhuw/gTujcEL02QBfCIsiS4DLhBlwAnyUUYZRDpdHOp0UZZz/us2j4b/K
PPrJAPrJAPrJAPpxDKBbIPhOxst251tRx68BYz5alOyOGDNguunGu32MBLQf
3eJ660DMj2q43mKB/3qLfl9E5K8+qe9HMUh/2CP715oFNxHYL24W9J1dciBv
Vl2sYd2FRZc5bhJxywVZEKYhWS48SzNdkNEingKILUyCKCZZtzUJIse3bi9E
OIXVMlqgKXCL2DEGxrpV7Ng0jINy6ljSiLFjNCf+YqnoMGkZ0a2Yg+CsLeM3
p8zQIoCL/BTcyvIhbIbxh8zx/N4I3ptDhbRQa0gN3aSFWtupoWYt1IrzYdob
Ij3rtvZCJD3rtvZCJD1rR3thg/Ss28dZT6fWJtobIj1r+8DMLulZu5OyIj1r
E+11Sc/6g320Zx8XaDaxnyWsIrb90x9y+mVc8V+Kd5Z1CoRU5aBlrJZoP3oN
GoBdzos3M0xslBYXyevZkj5mLJvdDAtds+Lz9ci+vgDZxq5XMxBTE2GQRCuf
fbW8LqpyPRdtEcQa7XwXxayy4cPczpKrhOyQMwSFRs2zF6fPlX2kWGTLvGDm
TllDXE4JeEqC5XhnVzN0hbJh9uxD8R3NpgQgx6qtiV1fQVsQeN4iENAebPw2
wmWt2KJmWBr86PDJMxsr02PGPqqStLxcoqqRwK4kfE6wSFo6SBlUShzVNDZN
kBfromLZ/tDNWl0yXiVmkt6wYktyAqDoL+uC6iqB0MKhANtjR1Szws8JXx3w
Qtg2+IiAxQzkDIukJk7Lq5nDJNk8MjwODSSVdoaJUH1zVuieZeWu1vWK9uH1
UrBY1QsNvlXBi0ap6s9yIWwsbV2slHfxZgWaMBuwKs5hY4sKcWRRXGvQeU11
4xHZyRWsCF/Qnc+wBG9aLIpytoL1AkaABIuHD7gFghEsn2MwDQdHzrI0wnDz
ZHG+xgQbWON9CVfLgtOEhgnS7owl5VcJtIDv+QxYS4U2qnoPLd/1imGqBEjW
+VVVXOIhXszOL+x5ATcXIVYNy8XR4VCodtbg2V4mN+Jo7XxNm7ThcJAAhN2d
aaN7aMUHabg1R9pXwtE5YHpSSSIaSYmywmRmsIFplSwQD/fsIyFVwy4olML1
1usrrBde5CybO+pI83kxp78ArPGyHDOWonXD1QE68AWyA6rXZYnVxher+Q1j
BvNCsAvAiENoAcvOVmwzqDp6skpkwbLr5IatUzIMPt4SFwiyOlEtZi9lVArI
uDiH9bN9p9rriX2FjIhRLWLRDHC7AiRfNQALXqC1xXN4RRDgb7izcBqiyvoF
/GfO/DTIMQBH16ySmtxSRMPiTZGt6edjoSvs2Y+QJtkqa7l6wZsQu+ZERus5
HKJMHTrEiRhhAdWu56uaJXTE9KPIqhvsE9eOe4R57OSuXSZqwSWjHHkFAFXO
uSQGyHJaAkUXOaJEvYbJJKIbFQqg4di0GiMKdEe9Cq4cju/cAwTLXmcwENql
LgqsYadjJNs9TgZ842sxUCIOnJOWNhT8Dqib0IWRzWrG2lZCE0YdcjW7xILe
x8UVMq5FdsPOk+P+66RGbJWbTZfLdTGf43XLe+ARlOtFRtObz14VyFEqoAzY
uFok1RTEuWd/C0ItTFli8QVdV7kcnxxmyE4ZzjGsUp/v1Nr6Afsu4X4qb/g9
K29LJLdiRdxI2TTwtswSvJVroBbtA0Lkkje5/9CVSCvmB87oLtcXTAcNgyFC
XxYZ7NmsvsSdrwrKmEjTEv3pRNRoywVxskUxPufYRTyUToG0AJx2YlfLdI1U
XlSXs5odXX0DXPHSvl5Wr2rJGGAo4Ear5ZLdSQrlcBNxtRI/Do4esu2klLwr
YkBwPqdke13RsmBHj2S81akyyuqzgNUUixq9UwRMY/GwMs21Uiazub1ezPFJ
CGzgDV2qBGi1EsIBTYozHDYhfpOWzIUK+1nSFtHpzIAi4MJbJ3N9P3HSAidg
E4+EnIW8A9Ff8PHZ5QwYSQOd9+yD1oaxLjSzIw5zZD+Vg43sA2HQrUe928V5
IXp+2eVR8yXSdaJdA8B7gSwLYjcaTaDqx8XQqmDMVH4jyKvOQYM+VVythGTB
sBe3AM6XicFChNFkyDXxCuR6jErxQhTiBuctgJAaL9Y5IrqvicdwSTfJX8Nd
Ch/4Na6Lu3vk8j/ac9tCenFfacpdeX1c8G/v2LJk0xkX69BkDLySyQakNMtL
hLaU1WKZY57pGqYOyrPLD6JYILIxJr1mgmQ3wSl6+mU5l3FJ9W3Qv++1gAAF
sitKCQAAT5wY4AkgK+jxa4Z9hMnwR5RUhJ8XdshvA4UrbEbFZ5p2gBrklUvs
EPAO/KTwLj8n1gUTlryHSYaCddE1BMS1XiQg52WcCpM8pykjsV2CQIncpzWm
2FU8yUfd1SJmy5sm5UwWsF9eUI8E9j6VMgtewauCiq7CUYFQx+4+oCl5ziN9
jONiXpyz6RxdAAoyuj9oTvRwvsxewYaDSANNaFUoiZKcA2LYDEdDAYWUOS4L
Josbus1xRnVRvJLTQfhpkr3Cv9RMJoGNKJJL2D9QAXGB58WqZuJ4odYI5FPM
y+bpaHhGRw88BWSf8V/XsGPrSw0RNBEVVUBcAiyGCfDiMlXhAWyokU24XrzC
1u3Zw4k9WK4rszmJKTpSwhU8WTOn/pHo6uUZDPnyeXJ+XuT6T27rt0dJ1v3F
ET8REZPSKylZYMjCfsHYxgGxPuJclXZuIJ/BNl/O3rBLn0zedHAsDAC5HFdd
Vu2VpoQTeFrXCRK1fu7A0DIQKolZMElCyN6KnJC5LJZ0GZkgy3NuSn5IVEL2
JbJK5gxSz/TErFCUOO9OgiKXxPkLTBOycIP8cCl5V5pDXQl47E/CssBioYCd
cdbs2YeoG56tCOW+ZfFFNaolK7R40K886oghDWfAksfCfYB2D37L1GvYb12h
QGUVlLbqhjNjmqcEOCPONIcbeqWJ80ydhnNDkZGJgzmKr+qoUXrlpIxC+BJY
BTLwOfyBScoLrJnAb0VZqUuQEc6xkJgIa2LzATJYom6M7IBNh81D2RK0KZK2
uhQixU37yND2YWfzgjh/jrKMOFvQ5M9hFJgL5cvhk+NT5REshBt4vBX5qfmO
SwMWQMt1gWumCSD0KJlJxSg1kflKdNHQ4wrlqzdc8mPO5mZfBXIk1kowVmqW
IqxF2F8aP+LsxbbWSykXCfsPoyvRGMYQGym2iWwiWIkDduaAIRtAIiYiFFA5
FNmLcKikEnhYyKukXtK4KFKn6qQTrn6hECRRQSDKnv2Aq4FoyCHdpD0mowUi
fgGSj9zSptv8QSnh+awmHkQ6hrS/wCRX1wUJX5114l8S2oOXx3RksDdKROWG
lqrQNerVzRXM9W5SVckNV5ySq/qecfaJnUJPTWLlx9YgyloI6kgj2bJCnR5Q
nMU40qWL5T3EYvgVmRbA2hZcPuK7wGbdEn4SbX/qFVr0pBKD1krsLoG31Sua
K58cXJ3VDHAmZzyEKe17ZDE+BjVemAC4WLFkJkyc8KMEOr4BmXTWaIPOVvj9
HQ9UrQum9dZrOKFq9pYLlEIbTkgJAdkdqP4SWGTXcmM1wdMEawvWs0Q8IAVg
nszQZKCmRnuJgzMzV8ZrMnK0S9KadnxZWnjXKLMFDloy8zUcP0oIDABRGpHh
NWgiQoFYpwzbVlwrYxGsjCC5WQJlwcew6fbPoFOIg/65tanWeDz+mf/P+oai
hHS18me4kdbrWa7F/8CVhBBP/vri9NnJsXWE4UG7dTlmZpBt+jx5+vz0yeOD
hxbLR/yI5ApsjXfD2Ohpb47F+j1erjb1BQlC6y/HfQEy4WFRIoYbusJ9M07p
a7OX0jnP5jC0oafy3ddzjGTWex+kqOEaOiX4odn2EaIuCKiHZH27MfW6ZE3G
KWvSWl9DqkNL98/dVVKbcSLbNEF8wwNDDUPzmNHW5gCLh/tLWR+xIzFL+dNL
1qbZbxPiyxiH3RH/DHikZiegaAq5nMGgiwa22bOSeZuAxS2wbpK6/GkIzYg3
OIa6/3sGaZi6UOixnsPZnyQ6gndz/jW3k2t6+qQMfTkn1KbUhILL0q62ngUp
7t/s/YQH+W0AYYgFbFL5g2JlXjrFKzW3D+VahvUV0OmVcdX48q8502frhalh
tV50oeObBQwlhwG+TUCmQSHlBH08JgjX0KI71JkQJcxjykjl1mFcJ1fGI4Df
my3Zhr14dmo/xOu6b+fG62o2xgu9xTQWoLG8MvVa05fd6FYzAN/2wjpWc5HQ
ujGvxovL2LUd82q6U5hkZ+qtR6Gaep5hDEpvP4xQafYy3UGqV+sOenZy9OTR
o5PHx7jEnmtIW+jANXSyyKobVlXuFJ/oGroXsgm94jVOgD/Z7YXRfgrcAfJi
cZWAltXXf02fRdd2X8BwU59q1s8UzuhZs3YfGAC0nz53KfigOq9NPZF6E/jW
7CFEIiM2MrdRGx03iwAKwjYiwNNqxuw6pv1iEsAVb2K+/1sClk6IBimAOGPf
mSJTVMigZtrhV40jNXAqNJdkK/sJaeSmc6TvzD/c6rksgXMns/naTHY1fB+X
7LtRvjGhukGq+f/aNWJwadUCAA==

-->

</rfc>

