<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-update-management-02" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Update Management Extensions">Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="April" day="25"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format
defined in <xref target="I-D.ietf-suit-manifest"/>. These extensions allow an update
author, update distributor or device operator to more precisely control
the distribution and installation of updates to IoT devices. These
extensions also provide a mechanism to inform a management system of
Software Identifier and Software Bill Of Materials information about an
updated device.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Full management of software updates for unattended, connected devices, such as Internet of Things devices requires a cooperation between the update author(s) and management, distribution, policy enforcement, and auditing systems. This specification provides the extensions to the SUIT manifest (<xref target="I-D.ietf-suit-manifest"/>) that enable an author to coordinate with these other systems. These extensions enable authors to instruct devices to examine update priority, local update authorisation, update lifetime, and system properties. They also enable devices to report and distributors to collect Software Bill of Materials information.</t>

<t>Extensions in this specification are OPTIONAL to implment and OPTIONAL to include in manifests unless otherwise designated.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
</list></t>

</section>
<section anchor="extension-metadata"><name>Extension Metadata</name>

<t>Some additional metadata makes management of SUIT updates easier:</t>

<t><list style="symbols">
  <t>CoSWID, CoMID, CoRIM</t>
  <t>Text descriptions of requirements</t>
</list></t>

<section anchor="manifest-digest-coswid"><name>suit-coswid</name>

<t>a CoSWID can enable Software Bill-of-Materials use-cases. A CoMID can enable monitoring of expected hardware. A CoRIM (which may contain both CoSWID and CoMID) can enable both of these use-cases, but can also act as the transport for expected values to an attestation Verifier. Tightly coupling update and attestation ensures that verification infrastructure always knows what software to expect on each device.</t>

<t>suit-coswid is a member of the suit-manifest. It contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

<t>suit-coswid is RECOMMENDED to implement and RECOMMENDED to include in manifests.</t>

<t>NOTE: CoRIM comprises a list of CoSWID and a list of CoMID, so it may be preferable to a CoSWID.</t>

<t>NOTE: CoMID may be a preferable alternative to Vendor ID/Class ID, however it consumes more bandwidth, so a UUID based on CoMID may be appropriate.</t>

</section>
<section anchor="text-version-required"><name>text-version-required</name>

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component "['x', 'y']", where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-parameters"><name>Extension Parameters</name>

<t>Several parameters are needed to define the behaviour of the commands specified in <xref target="extension-commands"/>. These parameters follow the same considerations as defined in Section 8.4.8 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>Component Metadata</c>
      <c>suit-parameter-component-metadata</c>
      <c><xref target="suit-parameter-component-metadata"/></c>
</texttable>

<section anchor="suit-parameter-use-before"><name>suit-parameter-use-before</name>

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer. Used with <xref target="suit-condition-use-before"/></t>

</section>
<section anchor="suit-parameter-minimum-battery"><name>suit-parameter-minimum-battery</name>

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority"><name>suit-parameter-update-priority</name>

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version"><name>suit-parameter-version</name>

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, "Equal [1]", then this will match all version sequences starting with 1. If a manifest defines both "Greater or Equal [1,0]" and "Lesser [1,10]", then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info"><name>suit-parameter-wait-info</name>

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-component-metadata"><name>suit-parameter-component-metadata</name>

<t>In some instances, a system may need to know the file metadata for a component. This metadata can include:</t>

<t><list style="symbols">
  <t>creator</t>
  <t>creation time</t>
  <t>modification time</t>
  <t>default permissions (rwx)</t>
  <t>a map of user/permission pairs</t>
  <t>a map of role/permission pairs</t>
  <t>a map of group/permission pairs</t>
  <t>file type</t>
</list></t>

<t>Component metadata is applied at time of fetch, copy, or write; see <xref target="I-D.ietf-suit-manifest"/>, sections 8.4.10.4, 8.4.10.5, 8.4.10.6. Therefore, the component metadata parameter must be set in advance of the component being fetched, copied into, or written.</t>

<section anchor="suit-meta-creator"><name>Creator</name>

<t>Sometimes, management of file systems requires that the creator of each file is correctly recorded. Because the default creator of files will be the update agent, this can obscure the actual creator of each file. The Creator metadata element allows overriding the default behaviour and setting the correct creator.</t>

<t>The creator is defined as follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)
]]></sourcecode></figure>

<t>The actor ID can be whatever is most appropriate for any given system. Typically, the actor ID will be a string (e.g., username), integer (e.g., POSIX userid), or UUID (e.g., TEEP TA UUID).</t>

</section>
<section anchor="creation-modification-time"><name>Creation &amp; Modification Time</name>

<t>The creation and modification times are defined by CBOR time types. These are defined in <xref target="RFC8949"/>, Section 3.4.2. The CBOR tag is REQUIRED when either creation or modification time are provided.</t>

<figure><sourcecode type="CDDL"><![CDATA[
suit-meta-modification-time => #6.1(uint)
suit-meta-creation-time => #6.1(uint)
]]></sourcecode></figure>

</section>
<section anchor="component-default-permissions"><name>Component Default Permissions</name>

<t>Typical permissions management systems require read, write, and execute permissions that are applied to all users who do not have their own explicit permissions. These are the default permissions for the current component. Default permissions are described by the following CDDL:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    r: 2, w: 1, x: 0,
    * $$SUIT_meta_permission_bits_extensions
)
]]></sourcecode></figure>

</section>
<section anchor="user-role-group-permissions"><name>User, Role, Group permissions</name>

<t>Many filesystems have users and groups. Additionally some have roles. Actors that have these associations can have specific permissions associated with them for each component. Each of these sets of permissions is defined the same way: with a map of actor identifiers to permissions.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}
]]></sourcecode></figure>

<t>The SUIT_meta_actor_id is the same as defined for Creator, <xref target="suit-meta-creator"/>.</t>

</section>
<section anchor="file-type"><name>File Type</name>

<t>File Type typically identifies whether a file is a directory, regular file, or symbolic link. If not specified, File Type defaults to regular file.</t>

<t>This enables specific management operations for SUIT command sequences:</t>

<t><list style="symbols">
  <t>To create a directory  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the directory to be created</t>
      <t>Set the Component metadata, including the file type for directory</t>
      <t>Set suit-parameter-content to an empty bstr</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
  <t>To create a symbolic link  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the link to be created</t>
      <t>Set the Component metadata, including the file type for symbolic link</t>
      <t>Set suit-parameter-content to the link target</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
</list></t>

<t>For example, the following Payload Fetch &amp; Install sequences will create a new /usr/local/bin directory, download https://cdn.example/example3.bin into a new file: /usr/local/bin/example3, then create a symlink at /usr/bin/example that points to /usr/local/bin/example3.</t>

<t><list style="symbols">
  <t>Common has components for:  <list style="symbols">
      <t>/usr/bin/example</t>
      <t>/usr/local/bin</t>
      <t>/usr/local/bin/example3</t>
    </list></t>
  <t>Payload fetch:  <list style="symbols">
      <t>set component index = 1</t>
      <t>set parameters:      <list style="symbols">
          <t>content = h''</t>
          <t>metadata = {file-type: directory}</t>
        </list></t>
      <t>write</t>
      <t>set component index = 2</t>
      <t>set URI = "https://cdn.example/example3.bin"</t>
      <t>fetch</t>
      <t>condition image digest</t>
    </list></t>
  <t>Install:  <list style="symbols">
      <t>set component index = 0</t>
      <t>set parameters:      <list style="symbols">
          <t>content = "/usr/local/bin/example3"</t>
          <t>metadata = {file-type: symlink}</t>
        </list></t>
      <t>write</t>
    </list></t>
</list></t>

</section>
</section>
</section>
<section anchor="extension-commands"><name>Extension Commands</name>

<t>The following table defines the semantics of the commands defined in this specification in the same way as in the Abstract Machine Description, Section 6.4, of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>CDDL Identifier</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c>assert(now() &lt; current.params[use-before])</c>
      <c>Check Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c>assert(battery &gt;= current.params[minimum-battery])</c>
      <c>Check Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c>assert( isAuthorized( current.params[priority]))</c>
      <c>Check Version</c>
      <c>suit-condition-version</c>
      <c>assert(version_check(current, current.params[version]))</c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c>until event(arg), wait</c>
      <c>Override Multiple</c>
      <c>suit-directive-override-multiple</c>
      <c>components[i].params[k] := v for-each k,v in d for-each i,d in arg</c>
      <c>Copy Params</c>
      <c>suit-directive-copy-params</c>
      <c>current.params[k] = components[i].params[k] for k in l for i,l in arg</c>
</texttable>

<section anchor="suit-condition-use-before"><name>suit-condition-use-before</name>

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-not-match"><name>suit-condition-image-not-match</name>

<t>Verify that the current component does not match the suit-parameter-image-digest (Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery"><name>suit-condition-minimum-battery</name>

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient's battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a "wait" until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized"><name>suit-condition-update-authorized</name>

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version"><name>suit-condition-version</name>

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component's version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-directive-wait"><name>suit-directive-wait</name>

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-override-multiple"><name>suit-directive-override-multiple</name>

<t>This directive enables setting parameters for multiple components at the same time. This allows a small reduction in encoding overhead:</t>

<t><list style="symbols">
  <t>without override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>set-component-index (2 bytes)</t>
      <t>override-parameters (1 byte + parameter map)</t>
    </list></t>
  <t>with override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>the component index key (1 byte)</t>
      <t>the parameter map</t>
    </list></t>
</list></t>

<t>Override-multiple requires the command (1-2 bytes) and one additional map to hold the parameter sets (1 byte). For one component, there is no savings. For multiple components, there is an encoding savings of 2 bytes per component.</t>

<t>Proper structuring of code should ensure that override-multiple follows a code-path nearly identical to set-component-index + override-parameters.</t>

<t>This command is purely an encoding alias for set-component-index and override-parameters. The component index is set to the last component listed in the override-multiple argument when override-multiple completes.</t>

<t>The following CDDL defines the argument for suit-directive-override-multiple:</t>

<t><spanx style="verb">CDDL
SUIT_Override_Mult_Arg = {
    uint =&gt; {+ $$SUIT_Parameters}
}
</spanx></t>

</section>
<section anchor="suit-directive-copy-params"><name>suit-directive-copy-params</name>

<t>suit-directive-copy-params enables a manifest author to specify one or more components to copy parameters from, and a list of parameters to copy from each specified source component.</t>

<t>The behaviour is exactly the same as override parameters, but with parameter values defined in existing components. Parameters are only copied between identical keys (no copying from URI to digest, for example).</t>

<t>For each entry in the map, the manifest processor sets the source component to be the component identified by the index contained in the map key. For each parameter identified in the copy list, the manifest processor copies the parameter from the source component to the current component.</t>

<t>The following CDDL defines the argument for suit-directive-copy-params:</t>

<t><spanx style="verb">CDDL
SUIT_Directive_Copy_Params = {
    uint =&gt; [+ int]
}
</spanx></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate key 14 in the SUIT Envelope registry for suit-coswid</t>
  <t>allocate key 14 in the SUIT Manifest registry for suit-coswid</t>
  <t>allocate key 7 in the SUIT Component Text registry for suit-text-version-required</t>
  <t>allocate the commands and parameters as shown in the following tables</t>
</list></t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document extends the SUIT manifest specification. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-sacm-coswid'>
   <front>
      <title>Concise Software Identification Tags</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Jessica Fitzgerald-McKay' initials='J.' surname='Fitzgerald-McKay'>
         <organization>National Security Agency</organization>
      </author>
      <author fullname='Charles Schmidt' initials='C.' surname='Schmidt'>
         <organization>The MITRE Corporation</organization>
      </author>
      <author fullname='David Waltermire' initials='D.' surname='Waltermire'>
         <organization>National Institute of Standards and Technology</organization>
      </author>
      <date day='24' month='February' year='2023'/>
      <abstract>
	 <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-sacm-coswid-24'/>
   
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.

 One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_severable-members-extensions //= (
    suit-coswid => bstr)
;    suit-coswid => bstr .cbor concise-software-identity)

$$severable-manifest-members-choice-extensions //= (
    suit-coswid => bstr .cbor SUIT_Command_Sequence / SUIT_Digest
)

SUIT_Condition //= (
    suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-version,           SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-wait,              SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-override-multiple, SUIT_Override_Mult_Arg)
SUIT_Directive //=(
    suit-directive-copy-params,       SUIT_Directive_Copy_Params)


SUIT_Override_Mult_Arg = {
    + uint => {+ $$SUIT_Parameters}
}
SUIT_Directive_Copy_Params = {
    + uint => [+ int]
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)
SUIT_Parameters //= (suit-parameter-component-metadata =>
    bstr .cbor SUIT_Component_Metadata)

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]


SUIT_Component_Metadata = {
    ? suit-meta-default-permissions => SUIT_meta_permissions,
    ? suit-meta-user-permissions => SUIT_meta_permission_map,
    ? suit-meta-group-permissions => SUIT_meta_permission_map,
    ? suit-meta-role-permissions => SUIT_meta_permission_map,
    ? suit-meta-file-type => SUIT_Filetype,
    ? suit-meta-modification-time => CBOR_Datetime,
    ? suit-meta-creation-time => CBOR_Datetime,
    ? suit-meta-creator => SUIT_meta_actor_id,
    * $$SUIT_Component_Metadata_Extensions
}

SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    r: 2, w: 1, x: 0,
    * $$SUIT_meta_permission_bits_extensions
)

SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}

SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)



$$suit-text-component-key-extensions //= (
    suit-text-version-required => tstr)

suit-coswid = 14
suit-condition-use-before        = 4
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-wait                     = 29

suit-wait-event-authorization        = 1
suit-wait-event-power                = 2
suit-wait-event-network              = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time                 = 5
suit-wait-event-time-of-day          = 6
suit-wait-event-day-of-week          = 7

suit-parameter-use-before        = 4
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29

suit-text-version-required      = 7
]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
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
28Hdbt1wW8RLWP8H2+zqcnZqAAA=

-->

</rfc>

