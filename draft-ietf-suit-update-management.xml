<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-update-management-02" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Update Management Extensions">Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="April" day="27"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format
defined in <xref target="I-D.ietf-suit-manifest"/>. These extensions allow an update
author, update distributor or device operator to more precisely control
the distribution and installation of updates to IoT devices. These
extensions also provide a mechanism to inform a management system of
Software Identifier and Software Bill Of Materials information about an
updated device.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Full management of software updates for unattended, connected devices, such as Internet of Things devices requires a cooperation between the update author(s) and management, distribution, policy enforcement, and auditing systems. This specification provides the extensions to the SUIT manifest (<xref target="I-D.ietf-suit-manifest"/>) that enable an author to coordinate with these other systems. These extensions enable authors to instruct devices to examine update priority, local update authorisation, update lifetime, and system properties. They also enable devices to report and distributors to collect Software Bill of Materials information.</t>

<t>Extensions in this specification are OPTIONAL to implment and OPTIONAL to include in manifests unless otherwise designated.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
</list></t>

</section>
<section anchor="extension-metadata"><name>Extension Metadata</name>

<t>Some additional metadata makes management of SUIT updates easier:</t>

<t><list style="symbols">
  <t>CoSWID, CoMID, CoRIM</t>
  <t>Text descriptions of requirements</t>
</list></t>

<section anchor="manifest-digest-coswid"><name>suit-coswid</name>

<t>a CoSWID can enable Software Bill-of-Materials use-cases. A CoMID can enable monitoring of expected hardware. A CoRIM (which may contain both CoSWID and CoMID) can enable both of these use-cases, but can also act as the transport for expected values to an attestation Verifier. Tightly coupling update and attestation ensures that verification infrastructure always knows what software to expect on each device.</t>

<t>suit-coswid is a member of the suit-manifest. It contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

<t>suit-coswid is RECOMMENDED to implement and RECOMMENDED to include in manifests.</t>

<t>NOTE: CoRIM comprises a list of CoSWID and a list of CoMID, so it may be preferable to a CoSWID.</t>

<t>NOTE: CoMID may be a preferable alternative to Vendor ID/Class ID, however it consumes more bandwidth, so a UUID based on CoMID may be appropriate.</t>

</section>
<section anchor="text-version-required"><name>text-version-required</name>

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component "['x', 'y']", where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-parameters"><name>Extension Parameters</name>

<t>Several parameters are needed to define the behaviour of the commands specified in <xref target="extension-commands"/>. These parameters follow the same considerations as defined in Section 8.4.8 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>Component Metadata</c>
      <c>suit-parameter-component-metadata</c>
      <c><xref target="suit-parameter-component-metadata"/></c>
</texttable>

<section anchor="suit-parameter-use-before"><name>suit-parameter-use-before</name>

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer. Used with <xref target="suit-condition-use-before"/></t>

</section>
<section anchor="suit-parameter-minimum-battery"><name>suit-parameter-minimum-battery</name>

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority"><name>suit-parameter-update-priority</name>

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version"><name>suit-parameter-version</name>

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, "Equal [1]", then this will match all version sequences starting with 1. If a manifest defines both "Greater or Equal [1,0]" and "Lesser [1,10]", then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info"><name>suit-parameter-wait-info</name>

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-component-metadata"><name>suit-parameter-component-metadata</name>

<t>In some instances, a system may need to know the file metadata for a component. This metadata can include:</t>

<t><list style="symbols">
  <t>creator</t>
  <t>creation time</t>
  <t>modification time</t>
  <t>default permissions (rwx)</t>
  <t>a map of user/permission pairs</t>
  <t>a map of role/permission pairs</t>
  <t>a map of group/permission pairs</t>
  <t>file type</t>
</list></t>

<t>Component metadata is applied at time of fetch, copy, or write; see <xref target="I-D.ietf-suit-manifest"/>, sections 8.4.10.4, 8.4.10.5, 8.4.10.6. Therefore, the component metadata parameter must be set in advance of the component being fetched, copied into, or written.</t>

<section anchor="suit-meta-creator"><name>Creator</name>

<t>Sometimes, management of file systems requires that the creator of each file is correctly recorded. Because the default creator of files will be the update agent, this can obscure the actual creator of each file. The Creator metadata element allows overriding the default behaviour and setting the correct creator.</t>

<t>The creator is defined as follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)
]]></sourcecode></figure>

<t>The actor ID can be whatever is most appropriate for any given system. Typically, the actor ID will be a string (e.g., username), integer (e.g., POSIX userid), or UUID (e.g., TEEP TA UUID).</t>

</section>
<section anchor="creation-modification-time"><name>Creation &amp; Modification Time</name>

<t>The creation and modification times are defined by CBOR time types. These are defined in <xref target="RFC8949"/>, Section 3.4.2. The CBOR tag is REQUIRED when either creation or modification time are provided.</t>

<figure><sourcecode type="CDDL"><![CDATA[
suit-meta-modification-time => #6.1(uint)
suit-meta-creation-time => #6.1(uint)
]]></sourcecode></figure>

</section>
<section anchor="component-default-permissions"><name>Component Default Permissions</name>

<t>Typical permissions management systems require read, write, and execute permissions that are applied to all users who do not have their own explicit permissions. These are the default permissions for the current component. Default permissions are described by the following CDDL:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    r: 2, w: 1, x: 0,
    * $$SUIT_meta_permission_bits_extensions
)
]]></sourcecode></figure>

</section>
<section anchor="user-role-group-permissions"><name>User, Role, Group permissions</name>

<t>Many filesystems have users and groups. Additionally some have roles. Actors that have these associations can have specific permissions associated with them for each component. Each of these sets of permissions is defined the same way: with a map of actor identifiers to permissions.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}
]]></sourcecode></figure>

<t>The SUIT_meta_actor_id is the same as defined for Creator, <xref target="suit-meta-creator"/>.</t>

</section>
<section anchor="file-type"><name>File Type</name>

<t>File Type typically identifies whether a file is a directory, regular file, or symbolic link. If not specified, File Type defaults to regular file.</t>

<t>This enables specific management operations for SUIT command sequences:</t>

<t><list style="symbols">
  <t>To create a directory  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the directory to be created</t>
      <t>Set the Component metadata, including the file type for directory</t>
      <t>Set suit-parameter-content to an empty bstr</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
  <t>To create a symbolic link  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the link to be created</t>
      <t>Set the Component metadata, including the file type for symbolic link</t>
      <t>Set suit-parameter-content to the link target</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
</list></t>

<t>For example, the following Payload Fetch &amp; Install sequences will create a new /usr/local/bin directory, download https://cdn.example/example3.bin into a new file: /usr/local/bin/example3, then create a symlink at /usr/bin/example that points to /usr/local/bin/example3.</t>

<t><list style="symbols">
  <t>Common has components for:  <list style="symbols">
      <t>/usr/bin/example</t>
      <t>/usr/local/bin</t>
      <t>/usr/local/bin/example3</t>
    </list></t>
  <t>Payload fetch:  <list style="symbols">
      <t>set component index = 1</t>
      <t>set parameters:      <list style="symbols">
          <t>content = h''</t>
          <t>metadata = {file-type: directory}</t>
        </list></t>
      <t>write</t>
      <t>set component index = 2</t>
      <t>set URI = "https://cdn.example/example3.bin"</t>
      <t>fetch</t>
      <t>condition image digest</t>
    </list></t>
  <t>Install:  <list style="symbols">
      <t>set component index = 0</t>
      <t>set parameters:      <list style="symbols">
          <t>content = "/usr/local/bin/example3"</t>
          <t>metadata = {file-type: symlink}</t>
        </list></t>
      <t>write</t>
    </list></t>
</list></t>

</section>
</section>
</section>
<section anchor="extension-commands"><name>Extension Commands</name>

<t>The following table defines the semantics of the commands defined in this specification in the same way as in the Abstract Machine Description, Section 6.4, of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>CDDL Identifier</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c>assert(now() &lt; current.params[use-before])</c>
      <c>Check Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c>assert(battery &gt;= current.params[minimum-battery])</c>
      <c>Check Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c>assert( isAuthorized( current.params[priority]))</c>
      <c>Check Version</c>
      <c>suit-condition-version</c>
      <c>assert(version_check(current, current.params[version]))</c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c>until event(arg), wait</c>
      <c>Override Multiple</c>
      <c>suit-directive-override-multiple</c>
      <c>components[i].params[k] := v for-each k,v in d for-each i,d in arg</c>
      <c>Copy Params</c>
      <c>suit-directive-copy-params</c>
      <c>current.params[k] = components[i].params[k] for k in l for i,l in arg</c>
</texttable>

<section anchor="suit-condition-use-before"><name>suit-condition-use-before</name>

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-not-match"><name>suit-condition-image-not-match</name>

<t>Verify that the current component does not match the suit-parameter-image-digest (Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery"><name>suit-condition-minimum-battery</name>

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient's battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a "wait" until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized"><name>suit-condition-update-authorized</name>

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version"><name>suit-condition-version</name>

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component's version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-directive-wait"><name>suit-directive-wait</name>

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-override-multiple"><name>suit-directive-override-multiple</name>

<t>This directive enables setting parameters for multiple components at the same time. This allows a small reduction in encoding overhead:</t>

<t><list style="symbols">
  <t>without override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>set-component-index (2 bytes)</t>
      <t>override-parameters (1 byte + parameter map)</t>
    </list></t>
  <t>with override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>the component index key (1 byte)</t>
      <t>the parameter map</t>
    </list></t>
</list></t>

<t>Override-multiple requires the command (1-2 bytes) and one additional map to hold the parameter sets (1 byte). For one component, there is no savings. For multiple components, there is an encoding savings of 2 bytes per component.</t>

<t>Proper structuring of code should ensure that override-multiple follows a code-path nearly identical to set-component-index + override-parameters.</t>

<t>This command is purely an encoding alias for set-component-index and override-parameters. The component index is set to the last component listed in the override-multiple argument when override-multiple completes.</t>

<t>The following CDDL defines the argument for suit-directive-override-multiple:</t>

<t><spanx style="verb">CDDL
SUIT_Override_Mult_Arg = {
    uint =&gt; {+ $$SUIT_Parameters}
}
</spanx></t>

</section>
<section anchor="suit-directive-copy-params"><name>suit-directive-copy-params</name>

<t>suit-directive-copy-params enables a manifest author to specify one or more components to copy parameters from, and a list of parameters to copy from each specified source component.</t>

<t>The behaviour is exactly the same as override parameters, but with parameter values defined in existing components. Parameters are only copied between identical keys (no copying from URI to digest, for example).</t>

<t>For each entry in the map, the manifest processor sets the source component to be the component identified by the index contained in the map key. For each parameter identified in the copy list, the manifest processor copies the parameter from the source component to the current component.</t>

<t>The following CDDL defines the argument for suit-directive-copy-params:</t>

<t><spanx style="verb">CDDL
SUIT_Directive_Copy_Params = {
    uint =&gt; [+ int]
}
</spanx></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate key 14 in the SUIT Envelope registry for suit-coswid</t>
  <t>allocate key 14 in the SUIT Manifest registry for suit-coswid</t>
  <t>allocate key 7 in the SUIT Component Text registry for suit-text-version-required</t>
  <t>allocate the commands and parameters as shown in the following tables</t>
</list></t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document extends the SUIT manifest specification. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-sacm-coswid'>
   <front>
      <title>Concise Software Identification Tags</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Jessica Fitzgerald-McKay' initials='J.' surname='Fitzgerald-McKay'>
         <organization>National Security Agency</organization>
      </author>
      <author fullname='Charles Schmidt' initials='C.' surname='Schmidt'>
         <organization>The MITRE Corporation</organization>
      </author>
      <author fullname='David Waltermire' initials='D.' surname='Waltermire'>
         <organization>National Institute of Standards and Technology</organization>
      </author>
      <date day='24' month='February' year='2023'/>
      <abstract>
	 <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-sacm-coswid-24'/>
   
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC8949'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='P. Hoffman' initials='P.' surname='Hoffman'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t><t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t></abstract>
</front>
<seriesInfo name='STD' value='94'/>
<seriesInfo name='RFC' value='8949'/>
<seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.

 One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_severable-members-extensions //= (
    suit-coswid => bstr)
;    suit-coswid => bstr .cbor concise-software-identity)

$$severable-manifest-members-choice-extensions //= (
    suit-coswid => bstr .cbor SUIT_Command_Sequence / SUIT_Digest
)

SUIT_Condition //= (
    suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-version,           SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-wait,              SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-override-multiple, SUIT_Override_Mult_Arg)
SUIT_Directive //=(
    suit-directive-copy-params,       SUIT_Directive_Copy_Params)


SUIT_Override_Mult_Arg = {
    + uint => {+ $$SUIT_Parameters}
}
SUIT_Directive_Copy_Params = {
    + uint => [+ int]
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)
SUIT_Parameters //= (suit-parameter-component-metadata =>
    bstr .cbor SUIT_Component_Metadata)

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]


SUIT_Component_Metadata = {
    ? suit-meta-default-permissions => SUIT_meta_permissions,
    ? suit-meta-user-permissions => SUIT_meta_permission_map,
    ? suit-meta-group-permissions => SUIT_meta_permission_map,
    ? suit-meta-role-permissions => SUIT_meta_permission_map,
    ? suit-meta-file-type => SUIT_Filetype,
    ? suit-meta-modification-time => CBOR_Datetime,
    ? suit-meta-creation-time => CBOR_Datetime,
    ? suit-meta-creator => SUIT_meta_actor_id,
    * $$SUIT_Component_Metadata_Extensions
}

SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    write_attr_ex: 13,
    read_attr_ex: 12, 
    sync: 11,
    delete: 10,
    recurse_delete: 9,
    write_attr: 8,
    change_owner: 7,
    change_perm: 6,
    read_perm: 5,
    read_attr: 4,
    create_append: 3,
    list_read: 2,
    create_write: 1,
    traverse_exec: 0,
    * $$SUIT_meta_permission_bits_extensions
)

SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}

SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)



$$suit-text-component-key-extensions //= (
    suit-text-version-required => tstr)

suit-coswid = 14
suit-condition-use-before        = 4
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-wait                     = 29

suit-wait-event-authorization        = 1
suit-wait-event-power                = 2
suit-wait-event-network              = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time                 = 5
suit-wait-event-time-of-day          = 6
suit-wait-event-day-of-week          = 7

suit-parameter-use-before        = 4
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29

suit-text-version-required      = 7
]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

