<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-update-management-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Update Management Extensions">Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="September" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format
defined in <xref target="I-D.ietf-suit-manifest"/>. These extensions allow an update
author, update distributor or device operator to more precisely control
the distribution and installation of updates to IoT devices. These
extensions also provide a mechanism to inform a management system of
Software Identifier and Software Bill Of Materials information about an
updated device.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Full management of software updates for unattended, connected devices, such as Internet of Things devices requires a cooperation between the update author(s) and management, distribution, policy enforcement, and auditing systems. This specification provides the extensions to the SUIT manifest (<xref target="I-D.ietf-suit-manifest"/>) that enable an author to coordinate with these other systems. These extensions enable authors to instruct devices to examine update priority, local update authorisation, update lifetime, and system properties. They also enable devices to report and distributors to collect Software Bill of Materials information.</t>

<t>Extensions in this specification are OPTIONAL to implment and OPTIONAL to include in manifests unless otherwise designated.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
</list></t>

</section>
<section anchor="extension-metadata"><name>Extension Metadata</name>

<t>Some additional metadata makes management of SUIT updates easier:</t>

<t><list style="symbols">
  <t>CoSWID, CoMID, CoRIM</t>
  <t>Text descriptions of requirements</t>
</list></t>

<section anchor="manifest-digest-coswid"><name>suit-coswid</name>

<t>a CoSWID can enable Software Bill-of-Materials use-cases. A CoMID can enable monitoring of expected hardware. A CoRIM (which may contain both CoSWID and CoMID) can enable both of these use-cases, but can also act as the transport for expected values to an attestation Verifier. Tightly coupling update and attestation ensures that verification infrastructure always knows what software to expect on each device.</t>

<t>suit-coswid is a member of the suit-manifest. It contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

<t>suit-coswid is RECOMMENDED to implement and RECOMMENDED to include in manifests.</t>

<t>NOTE: CoRIM comprises a list of CoSWID and a list of CoMID, so it may be preferable to a CoSWID.</t>

<t>NOTE: CoMID may be a preferable alternative to Vendor ID/Class ID, however it consumes more bandwidth, so a UUID based on CoMID may be appropriate.</t>

</section>
<section anchor="text-version-required"><name>text-version-required</name>

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component "['x', 'y']", where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-parameters"><name>Extension Parameters</name>

<t>Several parameters are needed to define the behaviour of the commands specified in <xref target="extension-commands"/>. These parameters follow the same considerations as defined in Section 8.4.8 of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>Component Metadata</c>
      <c>suit-parameter-component-metadata</c>
      <c><xref target="suit-parameter-component-metadata"/></c>
</texttable>

<section anchor="suit-parameter-use-before"><name>suit-parameter-use-before</name>

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer. Used with <xref target="suit-condition-use-before"/></t>

</section>
<section anchor="suit-parameter-minimum-battery"><name>suit-parameter-minimum-battery</name>

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority"><name>suit-parameter-update-priority</name>

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version"><name>suit-parameter-version</name>

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, "Equal [1]", then this will match all version sequences starting with 1. If a manifest defines both "Greater or Equal [1,0]" and "Lesser [1,10]", then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info"><name>suit-parameter-wait-info</name>

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-component-metadata"><name>suit-parameter-component-metadata</name>

<t>In some instances, a system may need to know the file metadata for a component. This metadata can include:</t>

<t><list style="symbols">
  <t>creator</t>
  <t>creation time</t>
  <t>modification time</t>
  <t>default permissions (rwx)</t>
  <t>a map of user/permission pairs</t>
  <t>a map of role/permission pairs</t>
  <t>a map of group/permission pairs</t>
  <t>file type</t>
</list></t>

<t>Component metadata is applied at time of fetch, copy, or write; see <xref target="I-D.ietf-suit-manifest"/>, sections 8.4.10.4, 8.4.10.5, 8.4.10.6. Therefore, the component metadata parameter must be set in advance of the component being fetched, copied into, or written.</t>

<section anchor="suit-meta-creator"><name>Creator</name>

<t>Sometimes, management of file systems requires that the creator of each file is correctly recorded. Because the default creator of files will be the update agent, this can obscure the actual creator of each file. The Creator metadata element allows overriding the default behaviour and setting the correct creator.</t>

<t>The creator is defined as follows:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)
]]></sourcecode></figure>

<t>The actor ID can be whatever is most appropriate for any given system. For example, the actor ID might be a string (e.g., username), integer (e.g., POSIX userid), or UUID (e.g., TEEP TA UUID).</t>

</section>
<section anchor="creation-modification-time"><name>Creation &amp; Modification Time</name>

<t>The creation and modification times are defined by CBOR time types. These are defined in <xref target="RFC8949"/>, Section 3.4.2. The CBOR tag is REQUIRED when either creation or modification time are provided.</t>

<figure><sourcecode type="CDDL"><![CDATA[
suit-meta-modification-time => #6.1(uint)
suit-meta-creation-time => #6.1(uint)
]]></sourcecode></figure>

</section>
<section anchor="component-default-permissions"><name>Component Default Permissions</name>

<t>Typical permissions management systems require read, write, and execute permissions that are applied to all users who do not have their own explicit permissions. These are the default permissions for the current component. Default permissions are described by the following CDDL:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    r: 2, w: 1, x: 0,
    * $$SUIT_meta_permission_bits_extensions
)
]]></sourcecode></figure>

</section>
<section anchor="user-role-group-permissions"><name>User, Role, Group permissions</name>

<t>Many filesystems have users and groups. Additionally some have roles. Actors that have these associations can have specific permissions associated with them for each component. Each of these sets of permissions is defined the same way: with a map of actor identifiers to permissions.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}
]]></sourcecode></figure>

<t>The SUIT_meta_actor_id is the same as defined for Creator, <xref target="suit-meta-creator"/>.</t>

</section>
<section anchor="file-type"><name>File Type</name>

<t>File Type typically identifies whether a file is a directory, regular file, or symbolic link. If not specified, File Type defaults to regular file.</t>

<t>This enables specific management operations for SUIT command sequences:</t>

<t><list style="symbols">
  <t>To create a directory  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the directory to be created</t>
      <t>Set the Component metadata, including the file type for directory</t>
      <t>Set suit-parameter-content to an empty bstr</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
  <t>To create a symbolic link  <list style="symbols">
      <t>Set the Component Index to the Component Identifier of the link to be created</t>
      <t>Set the Component metadata, including the file type for symbolic link</t>
      <t>Set suit-parameter-content to the link target</t>
      <t>Invoke suit-directive-write</t>
    </list></t>
</list></t>

<t>For example, the following Payload Fetch &amp; Install sequences will create a new /usr/local/bin directory, download https://cdn.example/example3.bin into a new file: /usr/local/bin/example3, then create a symlink at /usr/bin/example that points to /usr/local/bin/example3.</t>

<t><list style="symbols">
  <t>Common has components for:  <list style="symbols">
      <t>/usr/bin/example</t>
      <t>/usr/local/bin</t>
      <t>/usr/local/bin/example3</t>
    </list></t>
  <t>Payload fetch:  <list style="symbols">
      <t>set component index = 1</t>
      <t>set parameters:      <list style="symbols">
          <t>content = h''</t>
          <t>metadata = {file-type: directory}</t>
        </list></t>
      <t>write</t>
      <t>set component index = 2</t>
      <t>set URI = "https://cdn.example/example3.bin"</t>
      <t>fetch</t>
      <t>condition image digest</t>
    </list></t>
  <t>Install:  <list style="symbols">
      <t>set component index = 0</t>
      <t>set parameters:      <list style="symbols">
          <t>content = "/usr/local/bin/example3"</t>
          <t>metadata = {file-type: symlink}</t>
        </list></t>
      <t>write</t>
    </list></t>
</list></t>

</section>
</section>
</section>
<section anchor="extension-commands"><name>Extension Commands</name>

<t>The following table defines the semantics of the commands defined in this specification in the same way as in the Abstract Machine Description, Section 6.4, of <xref target="I-D.ietf-suit-manifest"/>.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>CDDL Identifier</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c>assert(now() &lt; current.params[use-before])</c>
      <c>Check Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c>assert(battery &gt;= current.params[minimum-battery])</c>
      <c>Check Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c>assert( isAuthorized( current.params[priority]))</c>
      <c>Check Version</c>
      <c>suit-condition-version</c>
      <c>assert(version_check(current, current.params[version]))</c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c>until event(arg), wait</c>
      <c>Override Multiple</c>
      <c>suit-directive-override-multiple</c>
      <c>components[i].params[k] := v for-each k,v in d for-each i,d in arg</c>
      <c>Copy Params</c>
      <c>suit-directive-copy-params</c>
      <c>current.params[k] = components[i].params[k] for k in l for i,l in arg</c>
</texttable>

<section anchor="suit-condition-use-before"><name>suit-condition-use-before</name>

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-not-match"><name>suit-condition-image-not-match</name>

<t>Verify that the current component does not match the suit-parameter-image-digest (Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery"><name>suit-condition-minimum-battery</name>

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient's battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a "wait" until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized"><name>suit-condition-update-authorized</name>

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version"><name>suit-condition-version</name>

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component's version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-directive-wait"><name>suit-directive-wait</name>

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-override-multiple"><name>suit-directive-override-multiple</name>

<t>This directive enables setting parameters for multiple components at the same time. This allows a small reduction in encoding overhead:</t>

<t><list style="symbols">
  <t>without override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>set-component-index (2 bytes)</t>
      <t>override-parameters (1 byte + parameter map)</t>
    </list></t>
  <t>with override-multiple, the encoding for each component consists of:  <list style="symbols">
      <t>the component index key (1 byte)</t>
      <t>the parameter map</t>
    </list></t>
</list></t>

<t>Override-multiple requires the command (1-2 bytes) and one additional map to hold the parameter sets (1 byte). For one component, there is no savings. For multiple components, there is an encoding savings of 2 bytes per component.</t>

<t>Proper structuring of code should ensure that override-multiple follows a code-path nearly identical to set-component-index + override-parameters.</t>

<t>This command is purely an encoding alias for set-component-index and override-parameters. The component index is set to the last component listed in the override-multiple argument when override-multiple completes.</t>

<t>The following CDDL defines the argument for suit-directive-override-multiple:</t>

<t><spanx style="verb">CDDL
SUIT_Override_Mult_Arg = {
    uint =&gt; {+ $$SUIT_Parameters}
}
</spanx></t>

</section>
<section anchor="suit-directive-copy-params"><name>suit-directive-copy-params</name>

<t>suit-directive-copy-params enables a manifest author to specify one or more components to copy parameters from, and a list of parameters to copy from each specified source component.</t>

<t>The behaviour is exactly the same as override parameters, but with parameter values defined in existing components. Parameters are only copied between identical keys (no copying from URI to digest, for example).</t>

<t>For each entry in the map, the manifest processor sets the source component to be the component identified by the index contained in the map key. For each parameter identified in the copy list, the manifest processor copies the parameter from the source component to the current component.</t>

<t>The following CDDL defines the argument for suit-directive-copy-params:</t>

<t><spanx style="verb">CDDL
SUIT_Directive_Copy_Params = {
    uint =&gt; [+ int]
}
</spanx></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate key 14 in the SUIT Envelope registry for suit-coswid</t>
  <t>allocate key 14 in the SUIT Manifest registry for suit-coswid</t>
  <t>allocate key 7 in the SUIT Component Text registry for suit-text-version-required</t>
  <t>allocate the commands and parameters as shown in the following tables</t>
</list></t>

<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>34</c>
      <c>Override Multiple</c>
      <c><xref target="suit-directive-override-multiple"/></c>
      <c>35</c>
      <c>Copy Params</c>
      <c><xref target="suit-directive-copy-params"/></c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document extends the SUIT manifest specification. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-sacm-coswid'>
   <front>
      <title>Concise Software Identification Tags</title>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Jessica Fitzgerald-McKay' initials='J.' surname='Fitzgerald-McKay'>
         <organization>National Security Agency</organization>
      </author>
      <author fullname='Charles Schmidt' initials='C.' surname='Schmidt'>
         <organization>The MITRE Corporation</organization>
      </author>
      <author fullname='David Waltermire' initials='D.' surname='Waltermire'>
         <organization>National Institute of Standards and Technology</organization>
      </author>
      <date day='24' month='February' year='2023'/>
      <abstract>
	 <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-sacm-coswid-24'/>
   
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='10' month='September' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-23'/>
   
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC8949'>
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='P. Hoffman' initials='P.' surname='Hoffman'/>
    <date month='December' year='2020'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='94'/>
  <seriesInfo name='RFC' value='8949'/>
  <seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.

 One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_severable-members-extensions //= (
    suit-coswid => bstr)
;    suit-coswid => bstr .cbor concise-swid-tag)

$$severable-manifest-members-choice-extensions //= (
    suit-coswid => bstr .cbor SUIT_Command_Sequence / SUIT_Digest
)

SUIT_Condition //= (
    suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-version,           SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-wait,              SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-override-multiple, SUIT_Override_Mult_Arg)
SUIT_Directive //=(
    suit-directive-copy-params,       SUIT_Directive_Copy_Params)


SUIT_Override_Mult_Arg = {
    + uint => {+ $$SUIT_Parameters}
}
SUIT_Directive_Copy_Params = {
    + uint => [+ int]
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => int)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)
SUIT_Parameters //= (suit-parameter-component-metadata =>
    bstr .cbor SUIT_Component_Metadata)

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]


SUIT_Component_Metadata = {
    ? suit-meta-default-permissions => SUIT_meta_permissions,
    ? suit-meta-user-permissions => SUIT_meta_permission_map,
    ? suit-meta-group-permissions => SUIT_meta_permission_map,
    ? suit-meta-role-permissions => SUIT_meta_permission_map,
    ? suit-meta-file-type => SUIT_Filetype,
    ? suit-meta-modification-time => CBOR_Datetime,
    ? suit-meta-creation-time => CBOR_Datetime,
    ? suit-meta-creator => SUIT_meta_actor_id,
    * $$SUIT_Component_Metadata_Extensions
}

SUIT_meta_permissions = uint .bits SUIT_meta_permission_bits
SUIT_meta_permission_bits = &(
    write_attr_ex: 13,
    read_attr_ex: 12, 
    sync: 11,
    delete: 10,
    recurse_delete: 9,
    write_attr: 8,
    change_owner: 7,
    change_perm: 6,
    read_perm: 5,
    read_attr: 4,
    creatdir_append: 3,
    list_read: 2,
    create_write: 1,
    traverse_exec: 0,
    * $$SUIT_meta_permission_bits_extensions
)

SUIT_meta_permission_map = {
    + SUIT_meta_actor_id => SUIT_meta_permissions
}

SUIT_meta_actor_id = UUID_Tagged / bstr / str / int
UUID_Tagged = #6.37(bstr)



$$suit-text-component-key-extensions //= (
    suit-text-version-required => tstr)

suit-coswid = 14
suit-condition-use-before        = 4
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-wait                     = 29
suit-directive-override-multiple        = 34
suit-directive-copy-params              = 35

suit-wait-event-authorization        = 1
suit-wait-event-power                = 2
suit-wait-event-network              = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time                 = 5
suit-wait-event-time-of-day          = 6
suit-wait-event-day-of-week          = 7

suit-parameter-use-before        = 4
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29

suit-text-version-required      = 7
]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

